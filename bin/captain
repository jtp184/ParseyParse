#!/usr/bin/env ruby
require 'bundler'
Bundler.require(:development, :default)

require 'ParseyParse'
require 'ParseyParse/cache'
require 'psych'
require 'pry'
require 'colorize'
require 'benchmark'
require 'optparse'

@cmd_opts = {}
OptionParser.new do |opts|
	opts.banner = "Usage: captain [options]"

	opts.on("-i", "--interactive") do
		@cmd_opts[:i] = true
	end

	opts.on("-n", "--input=FILE") do |n|
		@cmd_opts[:n] = n
	end

	opts.on("-o", "--output=FILE") do |o|
		@cmd_opts[:o] = o
	end

	opts.on("-c", "--create-output-file") do |c|
		@cmd_opts[:c] = true
	end
end.parse!

def set_output
	File.open(@cmd_opts[:o], 'w+b') {} if @cmd_opts[:c]
	raise "Ouput File not Found!" unless File.exist? @cmd_opts[:o]
	ParseyParse.configure do |conf|
		conf[:cache] = ParseyParse::YAMLCache.load_from(@cmd_opts[:o])
	end
end

def load_input
	raise "Input File not Found!" unless File.exist? @cmd_opts[:n]
	Psych.load(File.open(@cmd_opts[:n]))
end

def list_inputs
	c = ParseyParse::YAMLCache.load_from(@cmd_opts[:o])
	c.results.each_key { |k| puts "⦕ ".yellow  << "| " << "\"#{k}\"".red << " |"<< " ⦖".yellow }
end

def check_interactive_options(str)
	case str
	when /^exit$/i, /^quit$/i
		exit
	when /^pry$/i, /^console$/i, /^ruby$/i
		Pry.start
		exit
	when /^list-all$/i
		list_inputs
	else
		nil
	end
end

def main
	puts "Captain Cache".yellow << " v0.1" << "#{' (Interactive)'.cyan if @cmd_opts[:i] }"

	set_output if @cmd_opts[:o]
	
	if @cmd_opts[:n]
		input = load_input
		max = input.length
		puts "Ready to parse #{max.to_s.magenta} inputs"
		input.each_with_index { |n, x| puts "⦕ ".yellow << "| #{x+1}/#{max} | \"#{n.to_s.red}\" | (#{Benchmark.measure { ParseyParse.(n) }.total.round(4).to_s.green}s)" << " ⦖".yellow }
	elsif @cmd_opts[:i]
		loop do
			@results = []
			print "> "
			input = gets.chomp
			if check_interactive_options(input)
				next
			else
				b = Benchmark.measure { @results << ParseyParse.(input) }
				puts "⦕ ".yellow << "| \"#{input.red}\" | " << "(#{b.total.round(4).to_s.green}s)" << " ⦖".yellow
			end
		end
	end
end

main
